rm -fr jar2consul.jar jar2vault.jar deployer.jar

JAR2CONSUL_MAJOR=`echo $JAR2CONSUL_VERSION | awk -F "." '{print $1}'`
JAR2VAULT_MAJOR=`echo $JAR2VAULT_VERSION | awk -F "." '{print $1}'`

if [ "${JAR2CONSUL_MAJOR}" -lt 3 ]; then
	echo "Jar2Consul version should be 3.0.0 or greater"
    exit -1
fi
if [ "${JAR2VAULT_MAJOR}" -lt 3 ]; then
	echo "Jar2Vault version should be 3.0.0 or greater"
    exit -1
fi


MULE_MAJOR_VERSION=`echo $MuleRuntimeVersion | awk -F "." '{print $1}'`
echo "Mule version $MULE_MAJOR_VERSION detected"

export EnvName=$ToEnvironment
export EnvPrefix=$ToEnvironment

if [ "${EnvPrefix}" = "prod" ];then
	EnvPrefix="www"
fi


MULE_MAJOR_VERSION=`echo $MuleRuntimeVersion | awk -F "." '{print $1}'`
echo "Mule version $MULE_MAJOR_VERSION detected"

organaizationNameLower=`echo $OrganizationName | awk '{print tolower($0)}'`
ENV=`echo $ToEnvironment | awk '{print toupper($0)}'`


VAULT_ROLE_SUFFIX='_VAULT_ROLE_ID'
VAULT_SECRET_SUFFIX='_VAULT_SECRET_ID'

if [ $ENV == 'DEVINT' ] || [ $ENV == 'QA' ];then
	VAULT_ROLE_SUFFIX="${VAULT_ROLE_SUFFIX}2"
    VAULT_SECRET_SUFFIX="${VAULT_SECRET_SUFFIX}2"
fi


ROLEID="${ENV}${VAULT_ROLE_SUFFIX}"
SECRETID="${ENV}${VAULT_SECRET_SUFFIX}"
CONSUL_ACL=${ENV}_CONSUL_ACL
CONSUL_HOST=${ENV}_CONSUL_HOST
VAULT_HOST=${ENV}_VAULT_HOST

if [ $MULE_MAJOR_VERSION -eq 4 ];then
	ARTIFACT_EXTENSION=.jar
else
	ARTIFACT_EXTENSION=.zip
fi
ARTIFACT=$ApiArtifact_ARTIFACT_ID-$ApiArtifact_VERSION$ARTIFACT_EXTENSION


echo "Retrieving Mule-CD configurations"

cat<<EOF >vault.cred.json
{
	"role_id": "${!ROLEID}",
    "secret_id": "${!SECRETID}"
}
EOF
TOKEN=`curl https://${EnvPrefix}.vault.eis.nylcloud.com/v1/auth/approle/login -X POST -d @vault.cred.json | jq .auth.client_token`
rm -f vault.cred.json
##curl https://${EnvPrefix}.vault.eis.nylcloud.com/v1/secret/mule/$organaizationNameLower -H "X-Vault-Token:${TOKEN:1:-1}" | jq .data |jq -r 'to_entries[]|"\(.key)=\(.value)"' > mulecd.properties
curl https://${EnvPrefix}.vault.eis.nylcloud.com/v1/secret/mule/instlife -H "X-Vault-Token:${TOKEN:1:-1}" | jq .data |jq -r 'to_entries[]|"\(.key)=\(.value)"' > mulecd.properties

CONNECTED_APPS=`grep "anypoint.connected-app.enabled" mulecd.properties | cut -d'=' -f2`
if [ -z $CONNECTED_APPS ]; then
	CONNECTED_APPS=false
fi

##CONFIG_URL=http://artifactory.eis.nonprod.nylcloudlabs.com/artifactory/automation/devops/mule/continuos-deployment/organization-config/${organaizationNameLower}-organization-config.yml
CONFIG_URL=http://artifactory.eis.nonprod.nylcloudlabs.com/artifactory/automation/devops/mule/continuos-deployment/organization-config/instlife-organization-config.yml

CONFIG_STATE=`curl -s $CONFIG_URL -o organization-config.yml -w "%{http_code}"`
if [ $CONFIG_STATE == 200 ]; then
	EXT_ORG_CONFIG=--external-config=organization-config.yml
fi

echo "Mule-CD configurations are set"

echo "Downloading artifact"
wget -nv $ApiArtifact_ARTIFACT_URL -O $ARTIFACT

echo "Downloading jar2consul"
wget -nv $JAR2CONSUL_ARTIFACT_URL -O jar2consul.jar

echo "Downloading jar2vault"
wget -nv $JAR2VAULT_ARTIFACT_URL -O jar2vault.jar

echo "Downloading mule-deployer"
wget -nv $MULEDEPLOYER_ARTIFACT_URL -O deployer.jar


echo "Generating credentials and uploading properties to consul"
java -jar jar2consul.jar -Djar=$ARTIFACT -DappName=$ExchangeAssetName -Denv=$ToEnvironment -Dvault.role-id=${!ROLEID} -Dvault.secret-id=${!SECRETID} -Dvault.host=${!VAULT_HOST} -Dconsul.url=${!CONSUL_HOST} -Dconsul.acl=${!CONSUL_ACL} --is-mule-app
if [ $? -lt 0 ]; then
	echo "Jar2Consul failed to generate bootstrap properties"
	exit -1
fi

echo "Uploading vault properties"
java -jar jar2vault.jar --pushkv --jar=$ARTIFACT --env=$ToEnvironment --bootstrap-location=bootstrap-${ToEnvironment}.properties
if [ $? -lt 0 ]; then
	echo "Jar2Vault failed to push secure properties"
	exit -1
fi

FROM_ENV_ARG=
if [ $FromEnvironment != "AUTO-SELECT" ]; then
	FROM_ENV_ARG=--env.from=$FromEnvironment
fi

echo "Creating/Migrating API Manager asset"
java -jar deployer.jar --deploy-api --config-file=mulecd.properties --organization.name=$OrganizationName --env=$EnvName --api.asset.version=$ExchangeAssetVersion --api.asset.name=$ExchangeAssetName --api.name=$ApiManagerAssetName --api.version=$ApiManagerAssetVersion --api.context=$ApiContext --mule.version=$MuleRuntimeVersion --connected-app.enabled=$CONNECTED_APPS $FROM_ENV_ARG $EXT_ORG_CONFIG
##java -jar deployer.jar --deploy-api --config-file=mulecd.properties --organization.name="Institutional Life" --env=$EnvName --api.asset.version=$ExchangeAssetVersion --api.asset.name=$ExchangeAssetName --api.name=$ApiManagerAssetName --api.version=$ApiManagerAssetVersion --api.context=$ApiContext --mule.version=$MuleRuntimeVersion --connected-app.enabled=$CONNECTED_APPS $FROM_ENV_ARG $EXT_ORG_CONFIG
if [ $? -lt 0 ]; then
	echo "MuleDeployer failed to configure API manager asset"
	exit -1
fi

echo "Deploying Runtime application"
java -jar deployer.jar --deploy-application --config-file=mulecd.properties --api.config-file=bootstrap-${ToEnvironment}.properties --api.discovery-file=auto-discovery.properties --organization.name=$OrganizationName --env=$EnvName --api.context=$ApiContext --api.version=$ApiManagerAssetVersion --api.file=$ARTIFACT --mule.version=$MuleRuntimeVersion --worker.type=$WorkerSize --worker.count=$Workers --sumologic.url=$SumologicUrl --update-mode=$UpdateMode --persistent-queues.enabled=$UsePersistentQueues --object-store-v2.enabled=$UseObjectStoreV2 --autorestart.enabled=$EnableAutoRestart --connected-app.enabled=$CONNECTED_APPS --enable-analytics-agent=$EnableAnalyticsAgent --cloudhub.region=$Region $FROM_ENV_ARG $EXT_ORG_CONFIG
##java -jar deployer.jar --deploy-application --config-file=mulecd.properties --api.config-file=bootstrap-${ToEnvironment}.properties --api.discovery-file=auto-discovery.properties --organization.name="Institutional Life" --env=$EnvName --api.context=$ApiContext --api.version=$ApiManagerAssetVersion --api.file=$ARTIFACT --mule.version=$MuleRuntimeVersion --worker.type=$WorkerSize --worker.count=$Workers --sumologic.url=$SumologicUrl --update-mode=$UpdateMode --persistent-queues.enabled=$UsePersistentQueues --object-store-v2.enabled=$UseObjectStoreV2 --autorestart.enabled=$EnableAutoRestart --connected-app.enabled=$CONNECTED_APPS --enable-analytics-agent=$EnableAnalyticsAgent --cloudhub.region=$Region $FROM_ENV_ARG $EXT_ORG_CONFIG
if [ $? -lt 0 ]; then
	echo "MuleDeployer failed to deploy runtime manager asset"
	exit -1
fi
